name: sdsl CI

on:
  push:
    branches:
      # Push events to branches matching refs/heads/master
      - 'master'
  pull_request:

env:
  CMAKE_VERSION: 3.12.4
  TZ: Europe/Berlin

defaults:
  run:
    shell: bash -ex {0}

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "gcc8 on Linux"
            os: ubuntu-20.04
            cxx: "g++-8"
            cc: "gcc-8"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++17"

          - name: "gcc9 on Linux"
            os: ubuntu-20.04
            cxx: "g++-9"
            cc: "gcc-9"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++2a"

          - name: "gcc10 on Linux"
            os: ubuntu-20.04
            cxx: "g++-10"
            cc: "gcc-10"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++20"

          - name: "gcc10 header on Linux"
            os: ubuntu-20.04
            cxx: "g++-10"
            cc: "gcc-10"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++20"
            header_test: "ON"

          - name: "gcc10 ASAN on Linux"
            os: ubuntu-20.04
            cxx: "g++-10"
            cc: "gcc-10"
            build_type: Debug
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++20 -fsanitize=address"
            ctest_exclude: "faust|moby"
            ctest_include: "-im"

          - name: "gcc10 cereal on Linux"
            os: ubuntu-20.04
            cxx: "g++-10"
            cc: "gcc-10"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++20"
            has_cereal: "1"

          - name: "clang9 on Linux"
            os: ubuntu-20.04
            cxx: "clang++-9"
            cc: "clang-9"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++2a"

          - name: "clang10 on Linux"
            os: ubuntu-20.04
            cxx: "clang++-10"
            cc: "clang-10"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++20"

          - name: "clang11 on Linux"
            os: ubuntu-20.04
            cxx: "clang++-11"
            cc: "clang-11"
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++20"

          - name: "clang9 on macOS"
            os: macos-10.15
            cxx: "clang++-9"
            cc: "clang-9"
            build_type: Release
            build_threads: 3
            test_threads: 3
            cxx_flags: "-std=c++2a"

          - name: "clang11 on macOS"
            os: macos-10.15
            cxx: "clang++-11"
            cc: "clang-11"
            build_type: Release
            build_threads: 3
            test_threads: 3
            cxx_flags: "-std=c++20"

          - name: "clang11 ASAN on macOS"
            os: macos-10.15
            cxx: "clang++-11"
            cc: "clang-11"
            build_type: Debug
            build_threads: 3
            test_threads: 3
            cxx_flags: "-std=c++20 -fsanitize=address"
            ctest_exclude: "faust|moby"
            ctest_include: "-im"

          - name: "clang11 cereal on macOS"
            os: macos-10.15
            cxx: "clang++-11"
            cc: "clang-11"
            build_type: Release
            build_threads: 3
            test_threads: 3
            cxx_flags: "-std=c++20"
            has_cereal: "1"

    steps:
      - name: Checkout SDSL
        uses: actions/checkout@v2
        with:
          path: sdsl
          submodules: true

      - name: Get cached CMake
        uses: actions/cache@v2
        with:
          path: /tmp/cmake-download
          key: ${{ runner.os }}-CMake_${{ env.CMAKE_VERSION }}

      - name: Setup CMake
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            OS="Linux"
          else
            OS="Darwin"
          fi
          mkdir -p /tmp/cmake-download
          wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/cmake-download/ https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-${OS}-x86_64.tar.gz
          tar -C /tmp/ -zxf /tmp/cmake-download/cmake-${CMAKE_VERSION}-${OS}-x86_64.tar.gz
          echo "/tmp/cmake-${CMAKE_VERSION}-${OS}-x86_64/bin" >> $GITHUB_PATH # Only available in subsequent steps!

      - name: Add package source
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/ppa
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository --yes "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main"
          sudo apt-get update

      - name: Install ccache
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes ccache
          else
            brew install --force-bottle ccache
          fi

      - name: Install compiler ${{ matrix.cxx }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install --yes ${{ matrix.cxx }}
          else
            if [[ "${{ matrix.cxx }}" == "clang++-"* ]]; then
              cxx_macos_name=$(echo "${{ matrix.cxx }}" | sed "s/clang++-/llvm@/g") # e.g. llvm@7
            else
              cxx_macos_name=$(echo "${{ matrix.cxx }}" | sed "s/++-/cc@/g")
            fi
            brew install --force-bottle $cxx_macos_name
            brew link --overwrite $cxx_macos_name
            if [[ "${{ matrix.cxx }}" == "clang++-"* ]]; then
              ln -s /usr/local/opt/$cxx_macos_name/bin/clang++ /usr/local/opt/$cxx_macos_name/bin/${{ matrix.cxx }}
              echo "/usr/local/opt/$cxx_macos_name/bin" >> $GITHUB_PATH # Only available in subsequent steps!
            fi
          fi

      - name: Get cached build
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.name }}-ccache-${{ github.ref }}-${{ github.run_number }}
          # Restoring: From current branch, otherwise from base branch, otherwise from any branch.
          restore-keys: |
            ${{ matrix.name }}-ccache-${{ github.ref }}
            ${{ matrix.name }}-ccache-${{ github.base_ref }}
            ${{ matrix.name }}-ccache-

      - name: Tool versions
        env:
          CXX: ${{ matrix.cxx }}
        run: |
          env cmake --version
          env $CXX --version || true

      - name: Configure tests
        env:
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}
        run: |
          mkdir sdsl-build
          cd sdsl-build
          cmake ../sdsl -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_FLAGS="-pedantic -Wall -Wextra -Werror ${{ matrix.cxx_flags }}" -DSDSL_CEREAL=${{ matrix.has_cereal }} -DSDSL_HEADER_TEST=${{ matrix.header_test }}
          make VERBOSE=1 -j2 gtest_build

      - name: Build tests
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 5G
          CCACHE_IGNOREHEADERS: ${{ github.workspace }}/sdsl/include/sdsl/structure_tree.hpp
        run: |
          ccache -p || true
          cd sdsl-build
          if [[ "${{ matrix.header_test }}" == "ON" ]]; then
            make sdsl_header_test -k -j${{ matrix.build_threads }}
          else
            make sdsl_test_targets sdsl_examples sdsl_tutorials -k -j${{ matrix.build_threads }}
          fi
          ccache -s || true

      - name: Run tests
        run: |
          cd sdsl-build
          ctest . -j${{ matrix.test_threads }} --output-on-failure -E "${{ matrix.ctest_exclude }}" -R "${{ matrix.ctest_include }}"
